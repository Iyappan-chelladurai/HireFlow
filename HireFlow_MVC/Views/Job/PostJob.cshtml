@model HireFlow_MVC.Models.JobViewModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor  

@{  
    Layout = "_SystemLayout";  
    ViewData["Title"] = "Post Job";  

    var UserId = HttpContextAccessor.HttpContext.Session.GetString("UserId");  
}

<!-- Include stylesheet -->
<link href="https://cdn.jsdelivr.net/npm/quill@2.0.3/dist/quill.snow.css" rel="stylesheet" />
    <style>
        :root {
            --primary: #2563eb;
            --primary-dark: #1d4ed8;
            --secondary: #7e22ce;
            --dark: #1e293b;
            --light: #f8fafc;
            --gray: #64748b;
            --success: #10b981;
            --warning: #f59e0b;
            --error: #ef4444;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            color: var(--dark);
            line-height: 1.6;
            background-color: var(--light);
            overflow-x: hidden;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        ul {
            list-style: none;
        }

        .container {
            width: 100%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Header & Navigation */
        header {
            background-color: rgba(255, 255, 255, 0.95);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            backdrop-filter: blur(10px);
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary);
            display: flex;
            align-items: center;
        }

            .logo span {
                color: var(--secondary);
            }

        .nav-menu {
            display: flex;
            gap: 30px;
        }

        .nav-link {
            font-weight: 500;
            transition: color 0.3s;
            position: relative;
        }

            .nav-link:hover {
                color: var(--primary);
            }

            .nav-link::after {
                content: '';
                position: absolute;
                bottom: -5px;
                left: 0;
                width: 0;
                height: 2px;
                background-color: var(--primary);
                transition: width 0.3s;
            }

            .nav-link:hover::after {
                width: 100%;
            }

        .nav-cta {
            background-color: var(--primary);
            color: white;
            padding: 10px 20px;
            border-radius: 30px;
            font-weight: 600;
            transition: all 0.3s;
        }

            .nav-cta:hover {
                background-color: var(--primary-dark);
                transform: translateY(-2px);
            }

            .nav-cta::after {
                display: none;
            }

        .mobile-toggle {
            display: none;
            font-size: 1.5rem;
            cursor: pointer;
        }

        /* Sidebar */
        .sidebar {
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            color: white;
            height: 100vh;
            position: fixed;
            width: 250px;
            padding-top: 100px;
            left: 0;
            top: 0;
            z-index: 900;
        }

            .sidebar a {
                color: white;
                padding: 15px 25px;
                display: block;
                text-decoration: none;
                transition: all 0.3s;
                font-weight: 500;
                display: flex;
                align-items: center;
                gap: 12px;
            }

                .sidebar a:hover, .sidebar a.active {
                    background-color: rgba(255, 255, 255, 0.1);
                    padding-left: 30px;
                }

        /* Main Content */
        .main-content {
            margin-left: 250px;
            padding: 100px 20px 40px;
        }

        /* Page Header */
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .page-title {
            font-size: 1.8rem;
            font-weight: 700;
        }

        .back-button {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            color: var(--primary);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            padding: 8px 16px;
            border-radius: 8px;
            background-color: #e0f2fe;
        }

            .back-button:hover {
                background-color: #dbeafe;
            }

        /* View Toggle */
        .view-toggle {
            display: flex;
            background-color: #f1f5f9;
            border-radius: 8px;
            padding: 5px;
            margin-bottom: 20px;
        }

        .view-toggle-btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
            background: none;
        }

            .view-toggle-btn.active {
                background-color: white;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            }

        /* Search and Filters */
        .search-filters {
            background-color: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .search-box {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .search-input {
            flex: 1;
            padding: 12px 16px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

            .search-input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            }

        .search-button {
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0 20px;
            cursor: pointer;
            transition: all 0.3s;
        }

            .search-button:hover {
                background-color: var(--primary-dark);
            }

        .filter-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-label {
            font-weight: 500;
            font-size: 0.9rem;
            margin-bottom: 5px;
        }

        .filter-select {
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-family: 'Inter', sans-serif;
            font-size: 0.9rem;
            transition: border-color 0.3s;
        }

            .filter-select:focus {
                outline: none;
                border-color: var(--primary);
            }

        /* Tables */
        .table-responsive {
            overflow-x: auto;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            background-color: white;
            margin-bottom: 30px;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

            .data-table th {
                background-color: #f8fafc;
                padding: 15px;
                text-align: left;
                font-weight: 600;
                color: var(--gray);
                border-bottom: 2px solid #e2e8f0;
            }

            .data-table td {
                padding: 15px;
                border-bottom: 1px solid #e2e8f0;
            }

            .data-table tr:hover {
                background-color: #f8fafc;
            }

        .job-title-cell {
            font-weight: 600;
            color: var(--primary);
            cursor: pointer;
            transition: color 0.3s;
        }

            .job-title-cell:hover {
                color: var(--primary-dark);
            }

        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-active {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-draft {
            background-color: #fef3c7;
            color: #92400e;
        }

        .status-closed {
            background-color: #e5e7eb;
            color: #374151;
        }

        /* Candidate Cards */
        .candidate-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 25px;
        }

        .candidate-card {
            background-color: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05);
            transition: all 0.3s;
            border: 1px solid rgba(0, 0, 0, 0.05);
            height: 100%;
            display: flex;
            flex-direction: column;
        }

            .candidate-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            }

        .candidate-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 20px;
        }

        .candidate-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-new {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .status-screening {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .status-interview {
            background-color: #fef3c7;
            color: #92400e;
        }

        .status-offered {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-hired {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-rejected {
            background-color: #fee2e2;
            color: #b91c1c;
        }

        .match-score {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: white;
            font-size: 0.9rem;
        }

        .score-high {
            background-color: var(--success);
        }

        .score-medium {
            background-color: var(--warning);
        }

        .score-low {
            background-color: var(--error);
        }

        .candidate-image {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 15px;
            display: block;
            border: 3px solid #e0f2fe;
        }

        .candidate-name {
            font-size: 1.2rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 5px;
        }

        .candidate-position {
            color: var(--gray);
            text-align: center;
            margin-bottom: 20px;
        }

        .candidate-details {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }

        .candidate-detail {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
        }

        .candidate-detail-label {
            color: var(--gray);
        }

        .candidate-skills {
            margin-bottom: 20px;
        }

        .skills-label {
            font-size: 0.9rem;
            color: var(--gray);
            margin-bottom: 8px;
        }

        .skills-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .skill-badge {
            padding: 5px 10px;
            background-color: #e0f2fe;
            color: var(--primary);
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .candidate-actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: auto;
        }

        .btn {
            padding: 10px;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
            text-align: center;
            font-size: 0.9rem;
        }

        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }

            .btn-outline:hover {
                background-color: #f8fafc;
            }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

            .btn-primary:hover {
                background-color: var(--primary-dark);
            }

        .btn-success {
            background-color: var(--success);
            color: white;
        }

            .btn-success:hover {
                background-color: #0d966c;
            }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 30px;
        }

        .pagination-item {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 8px;
            background-color: white;
            color: var(--dark);
            font-weight: 500;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            cursor: pointer;
            transition: all 0.3s;
        }

            .pagination-item:hover {
                background-color: #f8fafc;
            }

            .pagination-item.active {
                background-color: var(--primary);
                color: white;
            }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            padding: 20px;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s;
        }

            .modal-overlay.active {
                opacity: 1;
                visibility: visible;
            }

        .modal {
            background-color: white;
            border-radius: 15px;
            width: 100%;
            max-width: 900px;
            max-height: 90vh;
            overflow-y: auto;
            padding: 40px;
            position: relative;
            transform: translateY(50px);
            transition: transform 0.5s;
        }

        .modal-overlay.active .modal {
            transform: translateY(0);
        }

        .modal-close {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--gray);
            transition: color 0.3s;
            background: none;
            border: none;
        }

            .modal-close:hover {
                color: var(--dark);
            }

        .modal-title {
            font-size: 1.8rem;
            margin-bottom: 5px;
        }

        .modal-subtitle {
            color: var(--gray);
            margin-bottom: 30px;
        }

        /* Candidate Profile Modal */
        .candidate-profile-header {
            display: flex;
            align-items: center;
            gap: 20px;
            margin-bottom: 30px;
        }

        .candidate-profile-image {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid #e0f2fe;
        }

        .candidate-profile-info {
            flex: 1;
        }

        .candidate-profile-name {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .candidate-profile-position {
            font-size: 1.2rem;
            color: var(--gray);
            margin-bottom: 15px;
        }

        .candidate-profile-contact {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }

        .contact-item {
            display: flex;
            align-items: center;
            gap: 8px;
            color: var(--gray);
        }

        .profile-section {
            margin-bottom: 30px;
        }

        .profile-section-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e2e8f0;
        }

        .profile-section-content {
            line-height: 1.8;
        }

        .experience-item, .education-item {
            margin-bottom: 20px;
            padding-bottom: 20px;
            border-bottom: 1px solid #e2e8f0;
        }

            .experience-item:last-child, .education-item:last-child {
                border-bottom: none;
                margin-bottom: 0;
                padding-bottom: 0;
            }

        .experience-title, .education-title {
            font-weight: 600;
            font-size: 1.1rem;
            margin-bottom: 5px;
        }

        .experience-company, .education-institution {
            font-weight: 500;
            color: var(--primary);
            margin-bottom: 5px;
        }

        .experience-date, .education-date {
            color: var(--gray);
            font-size: 0.9rem;
            margin-bottom: 10px;
        }

        .experience-description {
            color: var(--dark);
        }

        .skills-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }

        .skill-tag {
            padding: 8px 15px;
            background-color: #e0f2fe;
            color: var(--primary);
            border-radius: 20px;
            font-weight: 500;
        }

        /* Responsive Design */
        @@media (max-width: 992px) {
            .sidebar

        {
            width: 200px;
        }

        .main-content {
            margin-left: 200px;
        }

        .filter-row {
            grid-template-columns: 1fr 1fr;
        }

        }

        @@media (max-width: 768px) {
            .nav-menu

        {
            display: none;
        }

        .mobile-toggle {
            display: block;
        }

        .sidebar {
            width: 70px;
            padding-top: 90px;
        }

            .sidebar a span {
                display: none;
            }

        .main-content {
            margin-left: 70px;
            padding: 90px 15px 30px;
        }

        .page-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .filter-row {
            grid-template-columns: 1fr;
        }

        .candidate-grid {
            grid-template-columns: 1fr;
        }

        .candidate-profile-header {
            flex-direction: column;
            text-align: center;
        }

        .candidate-profile-contact {
            justify-content: center;
        }

        }

        @@media (max-width: 576px) {
            .sidebar

        {
            display: none;
        }

        .main-content {
            margin-left: 0;
        }

        .candidate-actions {
            grid-template-columns: 1fr;
        }

        .modal {
            padding: 30px 20px;
        }

        }

        /* Button Styles */
        .btn {
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s;
            border: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

            .btn-primary:hover {
                background-color: var(--primary-dark);
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(37, 99, 235, 0.3);
            }

        .btn-success {
            background-color: var(--success);
            color: white;
        }

            .btn-success:hover {
                background-color: #0d966c;
                transform: translateY(-2px);
            }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            padding: 20px;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s;
        }

            .modal-overlay.active {
                opacity: 1;
                visibility: visible;
            }

        .modal {
            background-color: white;
            border-radius: 15px;
            width: 100%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            padding: 40px;
            position: relative;
            transform: translateY(50px);
            transition: transform 0.5s;
        }

        .modal-overlay.active .modal {
            transform: translateY(0);
        }

        .modal-close {
            position: absolute;
            top: 20px;
            right: 20px;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--gray);
            transition: color 0.3s;
            background: none;
            border: none;
        }

            .modal-close:hover {
                color: var(--dark);
            }

        .modal-title {
            font-size: 1.8rem;
            margin-bottom: 5px;
        }

        .modal-subtitle {
            color: var(--gray);
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

            .form-input:focus, .form-select:focus, .form-textarea:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
            }

        .form-textarea {
            min-height: 120px;
            resize: vertical;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .modal-footer {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 30px;
        }

        /* Responsive Design for Modal */
        @@media (max-width: 768px) {
            .form-row

        {
            grid-template-columns: 1fr;
        }

        .modal {
            padding: 30px 20px;
        }

        .modal-footer {
            flex-direction: column;
        }

            .modal-footer .btn {
                width: 100%;
            }

        }
    </style>
 
    <!-- Main Content -->
    <div class="main-content">
        <div class="container">
            <!-- Jobs View -->

            <div class="page-header">
                <h2 class="page-title">Job Postings</h2>
            <button class="btn btn-primary" id="createJobBtn">
                    <i class="fas fa-plus"></i> Create New Job
                </button>
            </div>
 
                <div class="search-filters">
                    <div class="filter-row">
                        <div class="filter-group">
                            <label class="filter-label">Status</label>
                            <select class="filter-select">
                                <option value="">All Status</option>
                                <option value="active">Active</option>
                                <option value="draft">Draft</option>
                                <option value="closed">Closed</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Department</label>
                            <select class="filter-select">
                                <option value="">All Departments</option>
                                <option value="engineering">Engineering</option>
                                <option value="design">Design</option>
                                <option value="product">Product</option>
                                <option value="marketing">Marketing</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Location</label>
                            <select class="filter-select">
                                <option value="">All Locations</option>
                                <option value="remote">Remote</option>
                                <option value="san-francisco">San Francisco</option>
                                <option value="new-york">New York</option>
                                <option value="austin">Austin</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Sort By</label>
                            <select class="filter-select">
                                <option value="newest">Newest First</option>
                                <option value="applications">Most Applications</option>
                                <option value="title">Job Title</option>
                            </select>
                        </div>
                    </div>
                </div>

        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>S No</th>
                        <th>Job Title</th>
                        <th>Department</th>
                        <th>Location</th>
                        <th>Applications</th>
                        <th>Status</th>
                        <th>Posted Date</th>
                    </tr>
                </thead>
                <tbody id="job-table-body">
                    <!-- AJAX will load rows here -->
                </tbody>
            </table>
        </div>


                <div class="pagination">
                    <div class="pagination-item active">1</div>
                    <div class="pagination-item">2</div>
                    <div class="pagination-item">3</div>
                    <div class="pagination-item">Next</div>
                </div>
            </div>

            <!-- Candidates View -->
            <div id="candidates-view" style="display: none;">
                <div class="page-header">
                    <div>
                        <div class="back-button" id="back-to-jobs">
                            <i class="fas fa-arrow-left"></i> Back to Jobs
                        </div>
                        <h2 class="page-title" id="candidates-job-title">Candidates for Frontend Developer</h2>
                    </div>
                    <div class="search-box">
                        <input type="text" class="search-input" placeholder="Search candidates...">
                        <button class="search-button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>

                <div class="search-filters">
                    <div class="filter-row">
                        <div class="filter-group">
                            <label class="filter-label">Status</label>
                            <select class="filter-select">
                                <option value="">All Status</option>
                                <option value="new">New</option>
                                <option value="screening">Screening</option>
                                <option value="interview">Interview</option>
                                <option value="offered">Offered</option>
                                <option value="hired">Hired</option>
                                <option value="rejected">Rejected</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Match Score</label>
                            <select class="filter-select">
                                <option value="">All Scores</option>
                                <option value="high">High (80-100%)</option>
                                <option value="medium">Medium (50-79%)</option>
                                <option value="low">Low (0-49%)</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Experience</label>
                            <select class="filter-select">
                                <option value="">All Experience</option>
                                <option value="intern">Intern</option>
                                <option value="entry">Entry Level</option>
                                <option value="mid">Mid Level</option>
                                <option value="senior">Senior Level</option>
                            </select>
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">Sort By</label>
                            <select class="filter-select">
                                <option value="newest">Newest First</option>
                                <option value="score">Match Score</option>
                                <option value="name">Name</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- View Toggle -->
                <div class="view-toggle">
                    <button class="view-toggle-btn active" id="grid-view-btn">
                        <i class="fas fa-th-large"></i> Grid View
                    </button>
                    <button class="view-toggle-btn" id="table-view-btn">
                        <i class="fas fa-table"></i> Table View
                    </button>
                </div>

                <!-- Candidate Grid View -->
                <div class="candidate-grid" id="candidate-grid">
                    <!-- Candidate cards will be inserted here by JavaScript -->
                </div>

                <!-- Candidate Table View -->
                <div class="table-responsive" id="candidate-table" style="display: none;">
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Candidate</th>
                                <th>Status</th>
                                <th>Match Score</th>
                                <th>Experience</th>
                                <th>Education</th>
                                <th>Applied</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="candidate-table-body">
                            <!-- Candidate rows will be inserted here by JavaScript -->
                        </tbody>
                    </table>
                </div>

                <div class="pagination">
                    <div class="pagination-item active">1</div>
                    <div class="pagination-item">2</div>
                    <div class="pagination-item">3</div>
                    <div class="pagination-item">Next</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Candidate Profile Modal -->
    <div class="modal-overlay" id="candidate-profile-modal">
        <div class="modal">
            <button class="modal-close">&times;</button>
            <div id="candidate-profile-content">
                <!-- Candidate profile content will be inserted here by JavaScript -->
            </div>
        </div>
    </div>

<!-- Create Job Modal -->
<div class="modal-overlay" id="createJobModal">
    <div class="modal">
        <button class="modal-close">&times;</button>
        <h2 class="modal-title">Create New Job Posting</h2>
        <p class="modal-subtitle">Fill out the form below to create a new job posting</p>

        <form id="jobForm" asp-controller="Job" asp-action="PostJob">
            <!-- Hidden Fields (auto-generated by backend) -->
            <input type="hidden" id="jobId">
            <input   id="postedBy" value="@UserId">
            <input type="hidden" id="isActive" value="1">

            <!-- Job Title + Department -->
            <div class="form-row">
                <div class="form-group">
                    <label for="jobTitle" class="form-label">Job Title</label>
                    <input type="text" id="jobTitle" class="form-input" placeholder="e.g. Senior .NET Core Developer" required>
                </div>

                <div class="form-group">
                    <label for="department" class="form-label">Department</label>
                    <select id="department" class="form-select" required>
                        <option value="">Select Department</option>
                        <option value="IT">IT</option>
                        <option value="HR">HR</option>
                        <option value="Finance">Finance</option>
                        <option value="Marketing">Marketing</option>
                        <option value="Sales">Sales</option>
                    </select>
                </div>
            </div>

            <!-- Location + Salary -->
            <div class="form-row">
                <div class="form-group">
                    <label for="location" class="form-label">Location</label>
                    <input type="text" id="location" class="form-input" placeholder="e.g. Chennai, India" required>
                </div>

                <div class="form-group">
                    <label for="salary" class="form-label">Salary (₹)</label>
                    <input type="number" id="salary" class="form-input" placeholder="e.g. 95000" required>
                </div>
            </div>

            <!-- Employment Type + Openings -->
            <div class="form-row">
                <div class="form-group">
                    <label for="employmentType" class="form-label">Employment Type</label>
                    <select id="employmentType" class="form-select" required>
                        <option value="">Select Type</option>
                        <option value="Full-time">Full-time</option>
                        <option value="Part-time">Part-time</option>
                        <option value="Contract">Contract</option>
                        <option value="Internship">Internship</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="openings" class="form-label">Number of Openings</label>
                    <input type="number" id="openings" class="form-input" placeholder="e.g. 2" required>
                </div>
            </div>

            <!-- Skills -->
            <div class="form-group">
                <label for="skills" class="form-label">Required Skills (comma separated)</label>
                <input type="text" id="skills" class="form-input" placeholder="e.g. .NET Core, SQL Server, Microservices" required>
            </div>

            <!-- Experience + Education (for AI only) -->
            <div class="form-row">
                <div class="form-group">
                    <label for="experience" class="form-label">Experience Level</label>
                    <select id="experience" class="form-select">
                        <option value="">Select Experience Level</option>
                        <option value="Intern">Intern</option>
                        <option value="Entry">Entry Level</option>
                        <option value="Mid">Mid Level</option>
                        <option value="Senior">Senior Level</option>
                        <option value="Director">Director</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="education" class="form-label">Education</label>
                    <select id="education" class="form-select">
                        <option value="">Select Education Level</option>
                        <option value="High School">High School</option>
                        <option value="Associate">Associate Degree</option>
                        <option value="Bachelor">Bachelor's Degree</option>
                        <option value="Master">Master's Degree</option>
                        <option value="PhD">PhD</option>
                    </select>
                </div>
            </div>

            <!-- Closing Date -->
            <div class="form-group">
                <label for="closingDate" class="form-label">Closing Date</label>
                <input type="datetime-local" id="closingDate" class="form-input" required>
            </div>

            <!-- Job Description with AI -->
            <div class="form-group">
                <label for="jobDescription" class="form-label">Job Description</label>
                <button type="button" class="btn btn-secondary btn-sm" id="generateDescriptionBtn">
                    ✨ Generate with AI
                </button>
                <textarea id="jobDescription" class="form-input" style="min-height: 150px !important;" placeholder="Enter or generate job description"></textarea>
            </div>

            <!-- Footer Buttons -->
            <div class="modal-footer">
                <button type="button" class="btn" id="cancelBtn">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveDraftBtn">Save as Draft</button>
                <button type="submit" class="btn btn-success">Publish Job</button>
            </div>
        </form>
    </div>
</div>


<script src="https://cdn.ckeditor.com/ckeditor5/36.0.1/classic/ckeditor.js"></script>
<script src="https://cdn.ckeditor.com/ckeditor5/36.0.1/html-support.js"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>

        // Modal functionality
        const createJobBtn = document.getElementById('createJobBtn');
        const createJobModal = document.getElementById('createJobModal');
        const modalCloseA = document.querySelector('.modal-close');
        const cancelBtn = document.getElementById('cancelBtn');
        const jobForm = document.getElementById('jobForm');

        function openModal() {
            createJobModal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }


        function closeModal() {
            createJobModal.classList.remove('active');
            document.body.style.overflow = 'auto';
        }

        createJobBtn.addEventListener('click', openModal);
        modalCloseA.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);

        createJobModal.addEventListener('click', function(e) {
            if (e.target === createJobModal) {
                closeModal();
            }
        });



            // Mobile menu toggle
            document.querySelector('.mobile-toggle').addEventListener('click', function() {
                const navMenu = document.querySelector('.nav-menu');
                navMenu.style.display = navMenu.style.display === 'flex' ? 'none' : 'flex';
            });

            // Sample candidate data with detailed resume information
            const candidatesData = {
                1: [ // Frontend Developer
                    {
                        id: 1,
                        name: "John Smith",
                        position: "Frontend Developer",
                        status: "screening",
                        score: 87,
                        experience: "4 years",
                        education: "Bachelor's Degree in Computer Science",
                        applied: "Oct 12, 2023",
                        skills: ["React", "JavaScript", "HTML/CSS", "Redux", "TypeScript", "Vue.js", "SASS", "Webpack"],
                        image: "https://via.placeholder.com/100",
                        email: "john.smith@example.com",
                        phone: "(555) 123-4567",
                        location: "San Francisco, CA",
                        summary: "Experienced Frontend Developer with 4+ years of expertise in building responsive and user-friendly web applications. Strong proficiency in React, JavaScript, and modern CSS frameworks.",
                        workExperience: [
                            {
                                title: "Senior Frontend Developer",
                                company: "Tech Innovations Inc.",
                                duration: "Jan 2021 - Present",
                                description: "Led development of customer-facing React applications, improved performance by 40%, and mentored junior developers."
                            },
                            {
                                title: "Frontend Developer",
                                company: "Digital Solutions LLC",
                                duration: "Jun 2019 - Dec 2020",
                                description: "Developed and maintained multiple Vue.js applications, implemented responsive designs, and collaborated with UX team."
                            },
                            {
                                title: "Junior Web Developer",
                                company: "WebCraft Studios",
                                duration: "Aug 2018 - May 2019",
                                description: "Built websites using HTML, CSS, and JavaScript. Assisted in migrating legacy code to modern frameworks."
                            }
                        ],
                        education: [
                            {
                                degree: "Bachelor of Science in Computer Science",
                                institution: "University of California, Berkeley",
                                duration: "2014 - 2018",
                                description: "Graduated with honors. Relevant coursework: Algorithms, Data Structures, Web Development, UI/UX Design."
                            }
                        ],
                        certifications: [
                            "AWS Certified Developer - Associate",
                            "Google Mobile Web Specialist",
                            "React Advanced Certification"
                        ],
                        languages: [
                            "English (Native)",
                            "Spanish (Intermediate)"
                        ]
                    },
                    {
                        id: 2,
                        name: "Robert Wilson",
                        position: "Frontend Developer",
                        status: "rejected",
                        score: 42,
                        experience: "1 year",
                        education: "Associate Degree in Web Development",
                        applied: "Oct 13, 2023",
                        skills: ["HTML/CSS", "JavaScript", "jQuery", "Bootstrap"],
                        image: "https://via.placeholder.com/100",
                        email: "robert.wilson@example.com",
                        phone: "(555) 987-6543",
                        location: "Austin, TX",
                        summary: "Entry-level Frontend Developer with foundational knowledge of web technologies. Seeking opportunity to grow skills in modern frameworks.",
                        workExperience: [
                            {
                                title: "Web Developer Intern",
                                company: "Local Web Agency",
                                duration: "Mar 2022 - Feb 2023",
                                description: "Assisted in building client websites using HTML, CSS, and JavaScript. Performed website maintenance and updates."
                            }
                        ],
                        education: [
                            {
                                degree: "Associate Degree in Web Development",
                                institution: "Austin Community College",
                                duration: "2020 - 2022",
                                description: "Learned fundamentals of web development, design principles, and client-side scripting."
                            }
                        ],
                        certifications: [
                            "FreeCodeCamp Responsive Web Design Certification"
                        ],
                        languages: [
                            "English (Native)"
                        ]
                    },
                    {
                        id: 3,
                        name: "Emily Chen",
                        position: "Frontend Developer",
                        status: "interview",
                        score: 92,
                        experience: "5 years",
                        education: "Master's Degree in Human-Computer Interaction",
                        applied: "Oct 11, 2023",
                        skills: ["React", "TypeScript", "Vue", "SASS", "GraphQL", "Jest", "Next.js", "Webpack"],
                        image: "https://via.placeholder.com/100",
                        email: "emily.chen@example.com",
                        phone: "(555) 456-7890",
                        location: "New York, NY",
                        summary: "Senior Frontend Engineer with 5+ years of experience building scalable web applications. Passionate about creating intuitive user experiences and mentoring team members.",
                        workExperience: [
                            {
                                title: "Lead Frontend Engineer",
                                company: "FinTech Solutions",
                                duration: "Mar 2020 - Present",
                                description: "Lead a team of 5 developers in building financial dashboards using React and TypeScript. Implemented testing strategies that reduced bugs by 60%."
                            },
                            {
                                title: "Frontend Developer",
                                company: "E-Commerce Giant",
                                duration: "Jul 2018 - Feb 2020",
                                description: "Developed customer-facing features for high-traffic e-commerce platform. Optimized performance leading to 25% faster load times."
                            },
                            {
                                title: "UI Developer",
                                company: "Creative Agency",
                                duration: "Jun 2016 - Jun 2018",
                                description: "Created interactive websites and web applications for various clients using modern JavaScript frameworks."
                            }
                        ],
                        education: [
                            {
                                degree: "Master's in Human-Computer Interaction",
                                institution: "Carnegie Mellon University",
                                duration: "2014 - 2016",
                                description: "Focus on user-centered design, usability testing, and interface development."
                            },
                            {
                                degree: "Bachelor of Science in Computer Science",
                                institution: "University of Michigan",
                                duration: "2010 - 2014",
                                description: "Minor in Design. Graduated with honors."
                            }
                        ],
                        certifications: [
                            "Google UX Design Professional Certificate",
                            "AWS Certified Solutions Architect",
                            "Advanced React and Redux"
                        ],
                        languages: [
                            "English (Native)",
                            "Mandarin (Fluent)",
                            "French (Intermediate)"
                        ]
                    }
                ],
                2: [ // UX Designer
                    {
                        id: 4,
                        name: "Sarah Johnson",
                        position: "UX Designer",
                        status: "screening",
                        score: 92,
                        experience: "5 years",
                        education: "Master's Degree in Design",
                        applied: "Oct 11, 2023",
                        skills: ["Figma", "UI/UX", "Wireframing", "Prototyping", "User Research", "Illustrator", "Design Systems"],
                        image: "https://via.placeholder.com/100",
                        email: "sarah.johnson@example.com",
                        phone: "(555) 234-5678",
                        location: "Remote",
                        summary: "Senior UX Designer with 5 years of experience creating intuitive and beautiful digital products. Strong background in user research and interaction design.",
                        workExperience: [
                            {
                                title: "Senior UX Designer",
                                company: "Product Innovation Co.",
                                duration: "Jan 2021 - Present",
                                description: "Lead designer for SaaS products, conducted user research, created design systems, and collaborated with engineering teams."
                            },
                            {
                                title: "UX Designer",
                                company: "Digital Agency",
                                duration: "Jun 2018 - Dec 2020",
                                description: "Designed websites and applications for clients in various industries. Conducted usability testing and created interactive prototypes."
                            }
                        ],
                        education: [
                            {
                                degree: "Master's in Design",
                                institution: "Rhode Island School of Design",
                                duration: "2016 - 2018",
                                description: "Focus on interaction design and human-centered design methodologies."
                            }
                        ],
                        certifications: [
                            "NN/g UX Certification",
                            "Interaction Design Foundation Certificate"
                        ],
                        languages: [
                            "English (Native)",
                            "Spanish (Conversational)"
                        ]
                    }
                ]
            };

            // Job title data
            const jobTitles = {
                1: "Frontend Developer",
                2: "UX Designer",
                3: "Backend Developer",
                4: "Product Manager",
                5: "DevOps Engineer"
            };

            // View toggle functions
            const jobsView = document.getElementById('jobs-view');
            const candidatesView = document.getElementById('candidates-view');
            const candidateGrid = document.getElementById('candidate-grid');
            const candidateTable = document.getElementById('candidate-table');
            const candidateTableBody = document.getElementById('candidate-table-body');
            const candidatesJobTitle = document.getElementById('candidates-job-title');
            const backToJobsBtn = document.getElementById('back-to-jobs');
            const gridViewBtn = document.getElementById('grid-view-btn');
            const tableViewBtn = document.getElementById('table-view-btn');

            // Modal elements
            const candidateProfileModal = document.getElementById('candidate-profile-modal');
            const candidateProfileContent = document.getElementById('candidate-profile-content');
            const modalClose = document.querySelector('.modal-close');

            // Current job ID for candidates view
            let currentJobId = null;

            // Function to show candidates for a specific job
            function showCandidates(jobId) {
                currentJobId = jobId;

                // Update job title
                candidatesJobTitle.textContent = `Candidates for ${jobTitles[jobId]}`;

                // Clear existing candidate cards and table rows
                candidateGrid.innerHTML = '';
                candidateTableBody.innerHTML = '';

                // Get candidates for this job
                const candidates = candidatesData[jobId] || [];

                // Create candidate cards and table rows
                candidates.forEach(candidate => {
                    createCandidateCard(candidate);
                    createCandidateTableRow(candidate);
                });

                // Show the grid view by default
                candidateGrid.style.display = 'grid';
                candidateTable.style.display = 'none';

                // Switch views
                jobsView.style.display = 'none';
                candidatesView.style.display = 'block';
            }

            // Function to create candidate card
            function createCandidateCard(candidate) {
                const scoreClass = candidate.score >= 80 ? 'score-high' :
                                 candidate.score >= 50 ? 'score-medium' : 'score-low';

                const card = document.createElement('div');
                card.className = 'candidate-card';
                card.innerHTML = `
                    <div class="candidate-header">
                        <span class="candidate-status status-${candidate.status}">${candidate.status.charAt(0).toUpperCase() + candidate.status.slice(1)}</span>
                        <div class="match-score ${scoreClass}">${candidate.score}%</div>
                    </div>

                    <img src="${candidate.image}" alt="${candidate.name}" class="candidate-image">
                    <h3 class="candidate-name">${candidate.name}</h3>
                    <p class="candidate-position">Applied for: ${candidate.position}</p>

                    <div class="candidate-details">
                        <div class="candidate-detail">
                            <span class="candidate-detail-label">Experience:</span>
                            <span>${candidate.experience}</span>
                        </div>
                        <div class="candidate-detail">
                            <span class="candidate-detail-label">Education:</span>
                            <span>${candidate.education}</span>
                        </div>
                        <div class="candidate-detail">
                            <span class="candidate-detail-label">Applied:</span>
                            <span>${candidate.applied}</span>
                        </div>
                    </div>

                    <div class="candidate-skills">
                        <div class="skills-label">Skills:</div>
                        <div class="skills-list">
                            ${candidate.skills.map(skill => `<span class="skill-badge">${skill}</span>`).join('')}
                        </div>
                    </div>

                    <div class="candidate-actions">
                        <button class="btn btn-outline view-profile-btn" data-candidate-id="${candidate.id}">View Profile</button>
                        ${candidate.status === 'screening' ? '<button class="btn btn-primary">Shortlist</button>' : ''}
                        ${candidate.status === 'interview' ? '<button class="btn btn-primary">Schedule Interview</button>' : ''}
                        ${candidate.status === 'offered' ? '<button class="btn btn-primary">Manage Offer</button>' : ''}
                        ${candidate.status === 'hired' ? '<button class="btn btn-success">Start Onboarding</button>' : ''}
                    </div>
                `;

                // Add event listener to view profile button
                const viewProfileBtn = card.querySelector('.view-profile-btn');
                viewProfileBtn.addEventListener('click', function() {
                    showCandidateProfile(candidate);
                });

                candidateGrid.appendChild(card);
            }

            // Function to create candidate table row
            function createCandidateTableRow(candidate) {
                const scoreClass = candidate.score >= 80 ? 'score-high' :
                                 candidate.score >= 50 ? 'score-medium' : 'score-low';

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div style="display: flex; align-items: center; gap: 10px;">
                            <img src="${candidate.image}" alt="${candidate.name}" style="width: 40px; height: 40px; border-radius: 50%;">
                            <div>
                                <div style="font-weight: 600;">${candidate.name}</div>
                                <div style="font-size: 0.8rem; color: var(--gray);">${candidate.position}</div>
                            </div>
                        </div>
                    </td>
                    <td><span class="candidate-status status-${candidate.status}">${candidate.status.charAt(0).toUpperCase() + candidate.status.slice(1)}</span></td>
                    <td><div class="match-score ${scoreClass}" style="width: 40px; height: 40px; font-size: 0.8rem;">${candidate.score}%</div></td>
                    <td>${candidate.experience}</td>
                    <td>${candidate.education}</td>
                    <td>${candidate.applied}</td>
                    <td>
                        <div style="display: flex; gap: 8px;">
                            <button class="btn btn-outline view-profile-btn" data-candidate-id="${candidate.id}" style="padding: 8px;">View Profile</button>
                            <button class="btn btn-primary" style="padding: 8px;">Action</button>
                        </div>
                    </td>
                `;

                // Add event listener to view profile button
                const viewProfileBtn = row.querySelector('.view-profile-btn');
                viewProfileBtn.addEventListener('click', function() {
                    showCandidateProfile(candidate);
                });

                candidateTableBody.appendChild(row);
            }

            // Function to show candidate profile modal
            function showCandidateProfile(candidate) {
                // Generate profile content
                candidateProfileContent.innerHTML = `
                    <div class="candidate-profile-header">
                        <img src="${candidate.image}" alt="${candidate.name}" class="candidate-profile-image">
                        <div class="candidate-profile-info">
                            <h2 class="candidate-profile-name">${candidate.name}</h2>
                            <p class="candidate-profile-position">${candidate.position}</p>

                            <div class="candidate-profile-contact">
                                <div class="contact-item">
                                    <i class="fas fa-envelope"></i> ${candidate.email}
                                </div>
                                <div class="contact-item">
                                    <i class="fas fa-phone"></i> ${candidate.phone}
                                </div>
                                <div class="contact-item">
                                    <i class="fas fa-map-marker-alt"></i> ${candidate.location}
                                </div>
                            </div>

                            <div class="match-score ${candidate.score >= 80 ? 'score-high' : candidate.score >= 50 ? 'score-medium' : 'score-low'}" style="display: inline-flex;">
                                Match Score: ${candidate.score}%
                            </div>
                        </div>
                    </div>

                    <div class="profile-section">
                        <h3 class="profile-section-title">Professional Summary</h3>
                        <div class="profile-section-content">
                            <p>${candidate.summary}</p>
                        </div>
                    </div>

                    <div class="profile-section">
                        <h3 class="profile-section-title">Work Experience</h3>
                        <div class="profile-section-content">
                            ${candidate.workExperience.map(exp => `
                                <div class="experience-item">
                                    <div class="experience-title">${exp.title}</div>
                                    <div class="experience-company">${exp.company}</div>
                                    <div class="experience-date">${exp.duration}</div>
                                    <div class="experience-description">${exp.description}</div>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <div class="profile-section">
                        <h3 class="profile-section-title">Education</h3>
                        <div class="profile-section-content">
                            ${candidate.education.map(edu => `
                                <div class="education-item">
                                    <div class="education-title">${edu.degree}</div>
                                    <div class="education-institution">${edu.institution}</div>
                                    <div class="education-date">${edu.duration}</div>
                                    ${edu.description ? `<div class="education-description">${edu.description}</div>` : ''}
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <div class="profile-section">
                        <h3 class="profile-section-title">Skills</h3>
                        <div class="profile-section-content">
                            <div class="skills-grid">
                                ${candidate.skills.map(skill => `
                                    <span class="skill-tag">${skill}</span>
                                `).join('')}
                            </div>
                        </div>
                    </div>

                    ${candidate.certifications && candidate.certifications.length > 0 ? `
                    <div class="profile-section">
                        <h3 class="profile-section-title">Certifications</h3>
                        <div class="profile-section-content">
                            <ul>
                                ${candidate.certifications.map(cert => `
                                    <li>${cert}</li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                    ` : ''}

                    ${candidate.languages && candidate.languages.length > 0 ? `
                    <div class="profile-section">
                        <h3 class="profile-section-title">Languages</h3>
                        <div class="profile-section-content">
                            <ul>
                                ${candidate.languages.map(lang => `
                                    <li>${lang}</li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                    ` : ''}
                `;

                // Show the modal
                candidateProfileModal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }

            // Function to close modal
            function closeModal() {
                candidateProfileModal.classList.remove('active');
                document.body.style.overflow = 'auto';
            }

            // Event listeners for job title clicks
            document.querySelectorAll('.job-title-cell').forEach(element => {
                element.addEventListener('click', function() {
                    const jobId = this.getAttribute('data-job-id');
                    showCandidates(parseInt(jobId));
                });
            });

            // Event listener for back to jobs button
            backToJobsBtn.addEventListener('click', function() {
                candidatesView.style.display = 'none';
                jobsView.style.display = 'block';
            });

            // Event listeners for view toggle buttons
            gridViewBtn.addEventListener('click', function() {
                candidateGrid.style.display = 'grid';
                candidateTable.style.display = 'none';
                gridViewBtn.classList.add('active');
                tableViewBtn.classList.remove('active');
            });

            tableViewBtn.addEventListener('click', function() {
                candidateGrid.style.display = 'none';
                candidateTable.style.display = 'block';
                tableViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
            });

            // Event listener for modal close button
            modalClose.addEventListener('click', closeModal);

            // Close modal when clicking outside
            candidateProfileModal.addEventListener('click', function(e) {
                if (e.target === candidateProfileModal) {
                    closeModal();
                }
            });

            let editorInstance;
    ClassicEditor
      .create(document.querySelector('#jobDescription'), {
        toolbar: [
          'heading', '|',
          'bold', 'italic', 'underline', '|',
          'bulletedList', 'numberedList', '|',
          'link', 'undo', 'redo'
        ],
        placeholder: 'Enter job description here...',
        htmlSupport: {
          allow: [
            {
              name: /.*/,            // allow all elements
              attributes: true,      // allow all attributes
              classes: true,         // allow all classes
              styles: true           // allow all inline styles
            }
          ]
        }
      })
      .then(editor => {
        editorInstance = editor;
      })
      .catch(console.error);

 
    $(document).ready(function () {

        // 🔹 Generate Job Description (AI)
        $("#generateDescriptionBtn").on("click", function () {
            const jobData = {
                jobTitle: $("#jobTitle").val(),
                department: $("#department").val(),
                location: $("#location").val(),
                skills: $("#skills").val(),
                experience: $("#experience").val(),
                JobDescription: $("#jobDescription").val(),
                education: $("#education").val(),
                salary: parseFloat($("#salary").val()) || null,
                employmentType: $("#employmentType").val(),
                openings: parseInt($("#openings").val()) || 0,
                closingDate: $("#closingDate").val(),
                postedBy: $("#postedBy").val() || null
            };

            if (!jobData.jobTitle || !jobData.department || !jobData.location) {
                alert("Please fill Job Title, Department and Location before generating description.");
                return;
            }

            $.ajax({
                url: "https://localhost:7180/api/Jobs/generate-jd",
                method: "POST",
                contentType: "application/json",
                data: JSON.stringify(jobData),
                success: function (data) {
                    alert(data.jobDescriptionHtml)
                     if (editorInstance) {
                         alert("");
            // CKEditor method to set HTML content
            editorInstance.setData(data.jobDescriptionHtml || "<p>No description generated.</p>");
        }
                },
                error: function (xhr) {
                    console.error("Error generating description:", xhr.responseText);
                    alert("Something went wrong while generating description.");
                }
            });
        });

        //🔹 Save Draft
        $("#saveDraftBtn").on("click", function () {
            submitJobForm(true);
        });

        // 🔹 Publish Job
        $("#jobForm").on("submit", function (e) {
            e.preventDefault();
            submitJobForm(false);
        });

        // 🔹 Common Save Function
          function submitJobForm(isDraft) {
        const jobData = {
            JobTitle: $("#jobTitle").val(),
            JobDescription: $("#jobDescription").val(),
            Department: $("#department").val(),
            Location: $("#location").val(),
            Skills: $("#skills").val(),
            Salary: parseFloat($("#salary").val()) || null,
            EmploymentType: $("#employmentType").val(),
            Openings: parseInt($("#openings").val()) || 1,
            ClosingDate: $("#closingDate").val() || null,
            Experience: $("#experience").val(),
            Education: $("#education").val(),
            PostedBy: $("#postedBy").val(), // should be Guid if set
            IsActive: !isDraft
        };

        console.log("Posting Job Data:", jobData);

        $.ajax({
            url: '@Url.Action("PostJob", "Job")',
            method: "POST",
            contentType: "application/json",
            data: JSON.stringify(jobData),
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    $("#jobForm")[0].reset();
                    $("#createJobModal").hide();
                } else {
                    alert("Error: " + response.message);
                }
            },
            error: function (xhr) {
                console.error("Error saving job:", xhr.responseText);
                alert("Error: " + (xhr.responseJSON?.message || "Unable to save job"));
            }
        });
    }


        // 🔹 Cancel button
        $("#cancelBtn").on("click", function () {
            $("#createJobModal").hide();
        });
    });
     $(document).ready(function() {
        function loadJobs() {
             const tbody = $('#job-table-body');
            $.ajax({
                url: '@Url.Action("AllJobs", "Job")', // Replace with your API endpoint
                method: 'GET',
                dataType: 'json',
                success: function(data) {
                    tbody.empty(); // Clear existing rows
                      console.log("Jobs received:", data);

                      let Sno = 1;
                    data.forEach(job => {
                        const row = `
                            <tr>
                                <td>${Sno}</td>
                                <td><span class="job-title-cell" data-job-id="${job.jobId}">${job.jobTitle}</span></td>
                                <td>${job.department}</td>
                                <td>${job.location}</td>
                                <td>${job.candidateCount}</td>
                                <td><span class="status-badge status-${job.jobStatus}">${job.jobStatus}</span></td>
                                <td>${job.closingDate}</td>
                            </tr>
                        `;
                        tbody.append(row);
                        Sno++;
                    });
                },
                error: function(err) {
                    console.error('Error loading jobs:', err);
                }
            });
        }

        // Initial load
        loadJobs();
    });




    </script>

@section Scripts {
    <script>
        const updatePreview = (selector, target) => {
            document.querySelector(selector).addEventListener('input', e => {
                document.getElementById(target).textContent = e.target.value || document.getElementById(target).dataset.default;
            });
        };
        document.getElementById('preview-title').dataset.default = '[Job Title]';
        document.getElementById('preview-dept').dataset.default = '[Department]';
        document.getElementById('preview-desc').dataset.default = '[Short description here]';

        updatePreview('[name="JobTitle"]', 'preview-title');
        updatePreview('[name="Department"]', 'preview-dept');
        updatePreview('[name="JobDescription"]', 'preview-desc');
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
